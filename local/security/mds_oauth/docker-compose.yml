---
services:

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    hostname: keycloak
    container_name: keycloak
#    command: ["start-dev", "--log-level=DEBUG", "--health-enabled=true", "--import-realm"]
    command: ["start-dev", "--health-enabled=true", "--import-realm"]
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live' ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_PROXY=edge
      - KEYCLOAK_IMPORT=/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
      - "9000:9000"
    volumes:
      - ./imports/realm-export.json:/opt/keycloak/data/import/realm-export.json

  controller1:
    image: confluentinc/cp-server:${CP_VERSION}
    hostname: controller1
    container_name: controller1
    depends_on:
      keycloak:
        condition: service_healthy
    volumes:
      - ./keypair:/tmp/conf
    environment:
      KAFKA_PROCESS_ROLES: 'controller'
      CLUSTER_ID: ${CLUSTER_ID}
      KAFKA_NODE_ID: 1
#      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller1:19093'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller1:19093,2@controller2:19093,3@controller3:19093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:SASL_PLAINTEXT'
      KAFKA_LISTENERS: 'CONTROLLER://controller1:19093'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'INFO'
      KAFKA_LOG4J_LOGGERS: 'kafka.authorizer.logger=INFO'#,io.confluent=INFO,org.apache.kafka=WARN,kafka=WARN'
#      KAFKA_CONFLUENT_METADATA_BOOTSTRAP_SERVERS: broker1:8091

      # SECURITY
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: false
      KAFKA_CONFLUENT_BALANCER_ENABLE: false
      KAFKA_CONFLUENT_TELEMETRY_ENABLED: false
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: false
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: false
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false

      KAFKA_SUPER_USERS: User:my_super_user;User:admin
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,KRAFT_ACL

      KAFKA_CONFLUENT_METADATA_SERVER_KRAFT_CONTROLLER_ENABLED: true
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/private.pem

      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN

      KAFKA_LISTENER_NAME_CONTROLLER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret" \
        user_admin="admin-secret";

  controller2:
    image: confluentinc/cp-server:${CP_VERSION}
    hostname: controller2
    container_name: controller2
    depends_on:
      keycloak:
        condition: service_healthy
    volumes:
      - ./keypair:/tmp/conf
    environment:
      KAFKA_PROCESS_ROLES: 'controller'
      CLUSTER_ID: ${CLUSTER_ID}
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller1:19093,2@controller2:19093,3@controller3:19093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:SASL_PLAINTEXT'
      KAFKA_LISTENERS: 'CONTROLLER://controller2:19093'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'INFO'
      KAFKA_LOG4J_LOGGERS: 'kafka.authorizer.logger=INFO'#,io.confluent=INFO,org.apache.kafka=WARN,kafka=WARN'

      # SECURITY
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: false
      KAFKA_CONFLUENT_BALANCER_ENABLE: false
      KAFKA_CONFLUENT_TELEMETRY_ENABLED: false
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: false
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: false
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false

      KAFKA_SUPER_USERS: User:my_super_user;User:admin
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,KRAFT_ACL

      KAFKA_CONFLUENT_METADATA_SERVER_KRAFT_CONTROLLER_ENABLED: true
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/private.pem

      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN

      KAFKA_LISTENER_NAME_CONTROLLER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret" \
        user_admin="admin-secret";

  controller3:
    image: confluentinc/cp-server:${CP_VERSION}
    hostname: controller3
    container_name: controller3
    depends_on:
      keycloak:
        condition: service_healthy
    volumes:
      - ./keypair:/tmp/conf
    environment:
      KAFKA_PROCESS_ROLES: 'controller'
      CLUSTER_ID: ${CLUSTER_ID}
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller1:19093,2@controller2:19093,3@controller3:19093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:SASL_PLAINTEXT'
      KAFKA_LISTENERS: 'CONTROLLER://controller3:19093'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'INFO'
      KAFKA_LOG4J_LOGGERS: 'kafka.authorizer.logger=INFO'#,io.confluent=INFO,org.apache.kafka=WARN,kafka=WARN'

      # SECURITY
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: false
      KAFKA_CONFLUENT_BALANCER_ENABLE: false
      KAFKA_CONFLUENT_TELEMETRY_ENABLED: false
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: false
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: false
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false

      KAFKA_SUPER_USERS: User:my_super_user;User:admin
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,KRAFT_ACL

      KAFKA_CONFLUENT_METADATA_SERVER_KRAFT_CONTROLLER_ENABLED: true
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/private.pem

      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN

      KAFKA_LISTENER_NAME_CONTROLLER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret" \
        user_admin="admin-secret";

  broker1:
    image: confluentinc/cp-server:${CP_VERSION}
    hostname: broker1
    container_name: broker1
    depends_on:
      keycloak:
        condition: service_healthy
      controller1:
        condition: service_started
      controller2:
        condition: service_started
      controller3:
        condition: service_started
    ports:
      - "9092:9092"
      - "8091:8091"
    volumes:
      - ./../certificates:/certificates/
      - ./keypair:/tmp/conf
    environment:
      KAFKA_PROCESS_ROLES: 'broker'
      CLUSTER_ID: ${CLUSTER_ID}
#      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller1:19093'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@controller1:19093,2@controller2:19093,3@controller3:19093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:SASL_PLAINTEXT,INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://broker1:19092,EXTERNAL://0.0.0.0:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://broker1:19092,EXTERNAL://localhost:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_NODE_ID: 11
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'INFO'
      KAFKA_LOG4J_LOGGERS: 'kafka.authorizer.logger=INFO,io.confluent.common.security=DEBUG,org.apache.kafka.common.security=DEBUG,io.confluent.kafka.security=DEBUG,io.confluent.kafka.server.plugins.auth.token=DEBUG,io.confluent.security=INFO,'#io.confluent=INFO,org.apache.kafka=WARN,kafka=WARN
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_CONFLUENT_SECURITY_EVENT_ROUTER_CONFIG: "{\"routes\":{\"crn:///kafka=*/group=*\":{\"consume\":{\"allowed\":\"confluent-audit-log-events\",\"denied\":\"confluent-audit-log-events\"}},\"crn:///kafka=*/topic=*\":{\"produce\":{\"allowed\":\"confluent-audit-log-events\",\"denied\":\"confluent-audit-log-events\"},\"consume\":{\"allowed\":\"confluent-audit-log-events\",\"denied\":\"confluent-audit-log-events\"}}},\"destinations\":{\"topics\":{\"confluent-audit-log-events\":{\"retention_ms\":7776000000}}},\"default_topics\":{\"allowed\":\"confluent-audit-log-events\",\"denied\":\"confluent-audit-log-events\"}}"
      # ,\"excluded_principals\":[\"User:kafka\",\"User:ANONYMOUS\"]

      # SECURITY
      # Configure the Confluent Server Authorizer
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: false
      KAFKA_CONFLUENT_BALANCER_ENABLE: false
      KAFKA_CONFLUENT_TELEMETRY_ENABLED: false
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: false
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_ENABLE: false
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false

      KAFKA_SUPER_USERS: User:my_super_user;User:admin
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,KRAFT_ACL

      KAFKA_SASL_ENABLED_MECHANISMS: OAUTHBEARER,PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: OAUTHBEARER

      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      KAFKA_LISTENER_NAME_CONTROLLER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret";

      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_INTERNAL_OAUTHBEARER_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        publicKeyPath="/tmp/conf/public.pem" \
        unsecuredLoginStringClaim_sub="thePrincipalName" \
        clientId="my_super_user" \
        clientSecret="my_super_user_secret";

      # Use when the client use org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler as sasl.login.callback.handler.class
      # EOF #
      KAFKA_LISTENER_NAME_INTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.CompositeBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_INTERNAL_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/certs
      KAFKA_LISTENER_NAME_INTERNAL_SASL_OAUTHBEARER_EXPECTED_AUDIENCE: account
      KAFKA_LISTENER_NAME_INTERNAL_SASL_OAUTHBEARER_SUB_CLAIM_NAME: client_id
      KAFKA_LISTENER_NAME_INTERNAL_PRINCIPAL_BUILDER_CLASS: io.confluent.kafka.security.authenticator.OAuthKafkaPrincipalBuilder
      # EOF #

      # Use when the client use io.confluent.kafka.clients.plugins.auth.token.TokenBearerLoginCallbackHandler as sasl.login.callback.handler.class
      # EOF #
      #      KAFKA_LISTENER_NAME_INTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
      # EOF #

      KAFKA_LISTENER_NAME_INTERNAL_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler
      KAFKA_LISTENER_NAME_INTERNAL_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/token


      # Configure the token listener
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        publicKeyPath="/tmp/conf/public.pem" \
        unsecuredLoginStringClaim_sub="thePrincipalName";

      # Use when the client use org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler as sasl.login.callback.handler.class
      # EOF #
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.CompositeBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/certs
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_EXPECTED_AUDIENCE: account
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_SUB_CLAIM_NAME: client_id
      KAFKA_LISTENER_NAME_EXTERNAL_PRINCIPAL_BUILDER_CLASS: io.confluent.kafka.security.authenticator.OAuthKafkaPrincipalBuilder
      # EOF #

      # Use when the client use io.confluent.kafka.clients.plugins.auth.token.TokenBearerLoginCallbackHandler as sasl.login.callback.handler.class
      # EOF #
#      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
      # EOF #

      # Configure an MDS node
      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: http://0.0.0.0:8091
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: http://broker1:8091
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/private.pem
      KAFKA_CONFLUENT_METADATA_SERVER_OPENAPI_ENABLE: 'true'

      # Migrate to OAuth RBAC
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE: OAUTH
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_JWKS_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/certs
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_EXPECTED_ISSUER: http://keycloak:8080/realms/kafka-authbearer
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_EXPECTED_AUDIENCE: account
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_SUB_CLAIM_NAME: client_id
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_GROUPS_CLAIM_NAME: profile

      # Enable OAuth in RP
      KAFKA_KAFKA_REST_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler

      KAFKA_KAFKA_REST_OAUTHBEARER_JWKS_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/certs
      KAFKA_KAFKA_REST_OAUTHBEARER_EXPECTED_ISSUER: http://keycloak:8080/realms/kafka-authbearer
      KAFKA_KAFKA_REST_OAUTHBEARER_EXPECTED_AUDIENCE: account
      KAFKA_KAFKA_REST_OAUTHBEARER_SUB_CLAIM_NAME: client_id
      KAFKA_KAFKA_REST_OAUTHBEARER_GROUPS_CLAIM_NAME: profile

      # With RBAC
      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: SASL_PLAINTEXT://broker1:9092
      KAFKA_KAFKA_REST_CLIENT_SECURITY_PROTOCOL: SASL_PLAINTEXT
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker1:8091
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/token
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: my_super_user
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: my_super_user_secret
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 600000
      KAFKA_KAFKA_REST_CLIENT_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 600000
      KAFKA_KAFKA_REST_PUBLIC_KEY_PATH: /tmp/conf/public.pem
      KAFKA_KAFKA_REST_KAFKA_REST_RESOURCE_EXTENSION_CLASS: io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension

  schema-registry:
    image: confluentinc/cp-schema-registry:${CP_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      keycloak:
        condition: service_healthy
      broker1:
        condition: service_started
    ports:
      - "8081:8081"
    volumes:
      - ./../certificates:/certificates/
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:19092'
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:19092,broker2:19092,broker3:19092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
      SCHEMA_REGISTRY_LOG4J_LOGGERS: 'io.confluent=INFO,org.apache.kafka=INFO,kafka=INFO,org.eclipse=INFO,io.confluent.common.security=DEBUG'

      # SECURITY
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SASL_PLAINTEXT
      SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM: OAUTHBEARER
      SCHEMA_REGISTRY_KAFKASTORE_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler
      SCHEMA_REGISTRY_KAFKASTORE_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/token
      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="kafka_client" \
        clientSecret="kafka_client_secret";

      # Enable OAuth on REST API
      SCHEMA_REGISTRY_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler
      SCHEMA_REGISTRY_OAUTHBEARER_JWKS_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/certs
      SCHEMA_REGISTRY_OAUTHBEARER_EXPECTED_ISSUER: http://keycloak:8080/realms/kafka-authbearer
      SCHEMA_REGISTRY_OAUTHBEARER_EXPECTED_AUDIENCE: account
      SCHEMA_REGISTRY_OAUTHBEARER_SUB_CLAIM_NAME: client_id
      SCHEMA_REGISTRY_OAUTHBEARER_GROUPS_CLAIM_NAME: profile

#  connect:
#    image: confluentinc/cp-server-connect:${CP_VERSION}
#    hostname: connect
#    container_name: connect
#    depends_on:
#      keycloak:
#        condition: service_healthy
#      broker1:
#        condition: service_started
#    ports:
#      - "8083:8083"
#    volumes:
#      - ./../certificates:/certificates/
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: 'broker1:19092'
##      CONNECT_BOOTSTRAP_SERVERS: 'broker1:19092,broker2:19092,broker3:19092'
#      CONNECT_REST_ADVERTISED_HOST_NAME: connect
#      CONNECT_GROUP_ID: connect
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
#      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
#      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: https://schema-registry:8081
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /certificates/kafka.schema-registry.truststore.jks
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: confluent
#      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
#      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
#      CONNECT_LOG4J_LOGGERS: 'io.confluent=INFO,org.apache.kafka=INFO,kafka=INFO,org.eclipse=DEBUG,io.confluent.common.security=DEBUG'
#
#      # SECURITY
#      CONNECT_SECURITY_PROTOCOL: SASL_PLAINTEXT
#      CONNECT_SASL_MECHANISM: OAUTHBEARER
#      CONNECT_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler
#      CONNECT_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/token
#      CONNECT_SASL_JAAS_CONFIG: |
#        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
#        clientId="kafka_client" \
#        clientSecret="kafka_client_secret";
#
#      # Enable OAuth on REST API
#      CONNECT_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler
#      CONNECT_OAUTHBEARER_JWKS_ENDPOINT_URL: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/certs
#      CONNECT_OAUTHBEARER_EXPECTED_ISSUER: http://keycloak:8080/realms/kafka-authbearer
#      CONNECT_OAUTHBEARER_EXPECTED_AUDIENCE: account
#      CONNECT_OAUTHBEARER_SUB_CLAIM_NAME: client_id
#
#  akhq:
#    image: tchiotludo/akhq:latest
#    hostname: akhq
#    container_name: akhq
#    ports:
#      - "8088:8080"
#    depends_on:
#      keycloak:
#        condition: service_healthy
#      broker1:
#        condition: service_started
#    volumes:
#      - ./../certificates:/certificates/
#    environment:
#      AKHQ_CONFIGURATION: |
#        akhq:
#          connections:
#            docker-kafka-server:
#              properties:
#                bootstrap.servers: "broker1:19092"
#                security.protocol: SASL_PLAINTEXT
#                sasl.mechanism: OAUTHBEARER
#                sasl.jaas.config: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required oauth.client.id="kafka_client" oauth.client.secret="kafka_client_secret" oauth.token.endpoint.uri="http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/token";
#                sasl.login.callback.handler.class: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
#              schema-registry:
#                url: "http://schema-registry:8081"
#                properties:
#                  bearer.auth.credentials.source: OAUTHBEARER
#                  bearer.auth.issuer.endpoint.url: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/token
#                  bearer.auth.client.id: kafka_client
#                  bearer.auth.client.secret: kafka_client_secret
#              connect:
#                - name: "connect"
#                  url: "http://connect:8083"
##                  properties:
##                    bearer.auth.credentials.source: OAUTHBEARER
##                    bearer.auth.issuer.endpoint.url: http://keycloak:8080/realms/kafka-authbearer/protocol/openid-connect/token
##                    bearer.auth.client.id: kafka_client
##                    bearer.auth.client.secret: kafka_client_secret