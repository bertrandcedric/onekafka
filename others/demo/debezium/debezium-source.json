{
  "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
  "tasksMax": "1",
  "database.hostname": "postgres",
  "database.port": "5432",
  "database.dbname": "streaming",
  "database.user": "streaming",
  "database.password": "streaming_pwd",
  "database.tcpKeepAlive": true,
  "table.include.list": "public.outbox_event",
  "tombstones.on.delete": false,
  "snapshot.mode": "always",
  "publication.name": "dbz_outbox_publication",
  "publication.autocreate.mode": "disabled",
  "snapshot.fetch.size": "10240",
  "topic.prefix": "dkt-member.streaming.default",
  "skipped.operations": "t,u,d",
  "time.precision.mode": "adaptive",
  "plugin.name": "pgoutput",
  "heartbeat.interval.ms": 5000,
  "heartbeat.action.query": "INSERT INTO public.debezium_heartbeat (id, ts) VALUES (1, NOW()) ON CONFLICT(id) DO UPDATE SET ts=EXCLUDED.ts;",
  "snapshot.select.statement.overrides": "public.outbox_event",
  "snapshot.select.statement.overrides.public.outbox_event": "SELECT * FROM public.outbox_event WHERE published IS NULL or published IS FALSE ORDER BY created ASC",

  "transforms": "ExtractHeartbeatKey,Outbox,SetSchemaMetadata,TopicToKebabCase,EventRouterBySchemaVersion,CloudEvents,SetRecordSchemaValue,DropOutboxInHeader",

  "transforms.ExtractHeartbeatKey.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
  "transforms.ExtractHeartbeatKey.field": "serverName",
  "transforms.ExtractHeartbeatKey.predicate": "isHeartbeat",

  "transforms.Outbox.type": "io.debezium.transforms.outbox.EventRouter",
  "transforms.Outbox.table.fields.additional.placement": "type:header,created:header,schemaname:header,schemaversion:header,aggregatetype:header,aggregateid:header",
  "transforms.Outbox.table.expand.json.payload": true,
  "transforms.Outbox.table.table.field.event.schema.version": "schemaversion",
  "transforms.Outbox.table.table.field.event.payload": "payload",
  "transforms.Outbox.table.op.invalid.behavior": "warn",
  "transforms.Outbox.table.op.table.field.event.timestamp": "created",
  "transforms.Outbox.route.by.field": "aggregatetype",
  "transforms.Outbox.route.topic.regex": "(?<routedByValue>.*)",
  "transforms.Outbox.route.topic.replacement": "local.dkt-member.streaming.public.demo-debezium.${routedByValue}",
  "transforms.Outbox.predicate": "isHeartbeat",
  "transforms.Outbox.negate": true,

  "transforms.SetSchemaMetadata.type": "com.decathlon.kafka.connect.transforms.outbox.SetSchemaMetadata$Value",
  "transforms.SetSchemaMetadata.use.optional.for.record": false,
  "transforms.SetSchemaMetadata.predicate": "isHeartbeat",
  "transforms.SetSchemaMetadata.negate": true,

  "transforms.TopicToKebabCase.type": "com.decathlon.kafka.connect.transforms.TopicToKebabCase",
  "transforms.TopicToKebabCase.predicate": "isHeartbeat",
  "transforms.TopicToKebabCase.negate": true,

  "transforms.EventRouterBySchemaVersion.type": "com.decathlon.kafka.connect.transforms.outbox.EventRouterBySchemaVersion",
  "transforms.EventRouterBySchemaVersion.route.topic.replacement": "${topic}.v${schemaMajorVersion}.avro",
  "transforms.EventRouterBySchemaVersion.predicate": "isHeartbeat",
  "transforms.EventRouterBySchemaVersion.negate": true,

  "transforms.CloudEvents.type": "com.decathlon.kafka.connect.transforms.cloudevents.CloudEventsBinaryContentMode",
  "transforms.CloudEvents.cloudevents.attribute.subject.strategy.type": "com.decathlon.streaming.kafka.cloudevents.strategy.HeaderStrategy",
  "transforms.CloudEvents.cloudevents.attribute.subject.strategy.header": "aggregateid",
  "transforms.CloudEvents.cloudevents.attribute.subject.formatter.0.type": "com.decathlon.streaming.kafka.cloudevents.formatter.Sha3512AttributeFormatter",
  "transforms.CloudEvents.cloudevents.attribute.subject.formatter.1.type": "com.decathlon.streaming.kafka.cloudevents.formatter.RegexAttributeFormatter",
  "transforms.CloudEvents.cloudevents.attribute.subject.formatter.1.regex": "(?<attributeValue>.*)",
  "transforms.CloudEvents.cloudevents.attribute.subject.formatter.1.replacement": "drn:decathlon-com:member::streaming:member:sha3-512/${attributeValue}",
  "transforms.CloudEvents.cloudevents.attribute.id.enabled": true,
  "transforms.CloudEvents.cloudevents.attribute.id.strategy.type": "com.decathlon.streaming.kafka.cloudevents.strategy.HeaderStrategy",
  "transforms.CloudEvents.cloudevents.attribute.id.strategy.header": "id",
  "transforms.CloudEvents.cloudevents.attribute.id.formatter.0.type": "com.decathlon.streaming.kafka.cloudevents.formatter.RegexAttributeFormatter",
  "transforms.CloudEvents.cloudevents.attribute.id.formatter.0.regex": "(?<attributeValue>.*)",
  "transforms.CloudEvents.cloudevents.attribute.id.formatter.0.replacement": "uuid:${attributeValue}",
  "transforms.CloudEvents.cloudevents.attribute.content-type.enabled": true,
  "transforms.CloudEvents.cloudevents.attribute.content-type.strategy.type": "com.decathlon.streaming.kafka.cloudevents.strategy.StaticValueStrategy",
  "transforms.CloudEvents.cloudevents.attribute.content-type.strategy.value": "application/avro",
  "transforms.CloudEvents.cloudevents.attribute.source.enabled": true,
  "transforms.CloudEvents.cloudevents.attribute.source.strategy.type": "com.decathlon.streaming.kafka.cloudevents.strategy.StaticValueStrategy",
  "transforms.CloudEvents.cloudevents.attribute.source.strategy.value": "drn:decathlon-com:member::streaming:event:debezium/postgresql/demo",
  "transforms.CloudEvents.cloudevents.attribute.type.enabled": true,
  "transforms.CloudEvents.cloudevents.attribute.type.strategy.type": "com.decathlon.streaming.kafka.cloudevents.strategy.HeaderStrategy",
  "transforms.CloudEvents.cloudevents.attribute.type.strategy.header": "type",
  "transforms.CloudEvents.cloudevents.attribute.type.formatter.0.type": "com.decathlon.streaming.kafka.cloudevents.formatter.RegexAttributeFormatter",
  "transforms.CloudEvents.cloudevents.attribute.type.formatter.0.regex": "(?<attributeValue>.*)",
  "transforms.CloudEvents.cloudevents.attribute.type.formatter.0.replacement": "com.decathlon.member.streaming.events.${attributeValue}",
  "transforms.CloudEvents.cloudevents.attribute.type.formatter.1.type": "com.decathlon.streaming.kafka.cloudevents.formatter.LowerCaseAttributeFormatter",
  "transforms.CloudEvents.cloudevents.attribute.time.enabled": true,
  "transforms.CloudEvents.cloudevents.attribute.time.strategy.type": "com.decathlon.streaming.kafka.cloudevents.strategy.HeaderStrategy",
  "transforms.CloudEvents.cloudevents.attribute.time.strategy.header": "created",
  "transforms.CloudEvents.predicate": "isHeartbeat",
  "transforms.CloudEvents.negate": true,

  "transforms.SetRecordSchemaValue.type": "com.decathlon.kafka.connect.transforms.avro.SetRecordSchemaValue",
  "transforms.SetRecordSchemaValue.schema.registry.url": "http://schema-registry:8081",
  "transforms.SetRecordSchemaValue.subject.schema.alias.source": "aggregatetype:header",
  "transforms.SetRecordSchemaValue.subject.schema.values": "MemberEvent",
  "transforms.SetRecordSchemaValue.subject.MemberEvent.name": "local.dkt-member.streaming.public.demo-debezium.member-event.v1.avro-value",
  "transforms.SetRecordSchemaValue.predicate": "isHeartbeat",
  "transforms.SetRecordSchemaValue.negate": true,

  "transforms.DropOutboxInHeader.type": "org.apache.kafka.connect.transforms.DropHeaders",
  "transforms.DropOutboxInHeader.headers": "id,created,schemaname,schemaversion,aggregatetype,aggregateid",
  "transforms.DropOutboxInHeader.predicate": "isHeartbeat",
  "transforms.DropOutboxInHeader.negate": true,

  "key.converter": "com.decathlon.kafka.crypto.serdes.KafkaHashedKeyConverter",

  "value.converter": "com.decathlon.kafka.crypto.serdes.KafkaCryptoConverter",
  "value.converter.crypto.serdes.delegate.converter": "io.confluent.connect.avro.AvroConverter",
  "value.converter.crypto.serdes.tink.keyset.json.string": "##TINK_KEYSET_JSON##",
  "value.converter.schema.registry.url": "http://schema-registry:8081",
  "value.converter.auto.register.schemas": false,
  "value.converter.use.latest.version": true,
  "value.converter.enhanced.avro.schema.support": true,

  "predicates": "isHeartbeat",
  "predicates.isHeartbeat.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
  "predicates.isHeartbeat.pattern": "__debezium-heartbeat.dkt-member.streaming.default"
}
